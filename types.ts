
/**
 * @what Defines the different types of nodes that can exist in the flowchart.
 */
export enum NodeType {
  START = 'START', // The entry point of the flow.
  AGENT = 'AGENT', // A standard processing unit that calls the Gemini API.
  END = 'END', // The termination point of the flow, holding the final result.
  CONDITIONAL_AGENT = 'CONDITIONAL_AGENT', // An agent whose output determines the next path to take.
}

/**
 * @what Represents a web search result used for grounding.
 * @property {string} uri - The URL of the source.
 * @property {string} title - The title of the web page.
 */
export interface GroundingChunkWeb {
  uri: string;
  title: string;
}

/**
 * @what A generic container for a grounding chunk, which provides sources for the AI's response.
 * @property {GroundingChunkWeb} [web] - A web source, if available.
 */
export interface GroundingChunk {
  web?: GroundingChunkWeb;
  // Other types of chunks could be defined here if needed
}

/**
 * @what Represents a single node in the AI agent flowchart.
 * @property {string} id - A unique identifier for the node.
 * @property {NodeType} type - The type of the node (e.g., START, AGENT).
 * @property {string} description - The user-defined description or prompt for the agent.
 * @property {number} x - The x-coordinate on the canvas.
 * @property {number} y - The y-coordinate on the canvas.
 * @property {string} [output] - The most recent output generated by this node.
 * @property {string} [lastProcessedInput] - The most recent input received by this node.
 * @property {boolean} [enableInternetSearch] - Flag to enable Google Search for this agent.
 * @property {GroundingChunk[]} [groundingMetadata] - A list of sources used by the agent.
 */
export interface AgentNode {
  id: string;
  type: NodeType;
  description: string;
  x: number;
  y: number;
  output?: string;
  lastProcessedInput?: string;
  enableInternetSearch?: boolean; 
  groundingMetadata?: GroundingChunk[];
}

/**
 * @what Represents a connection (edge) between two nodes in the flowchart.
 * @property {string} id - A unique identifier for the edge.
 * @property {string} sourceId - The ID of the node where the edge originates.
 * @property {string} targetId - The ID of the node where the edge terminates.
 * @property {string} [conditionKeyword] - For edges from a CONDITIONAL_AGENT, this keyword must be in the output to follow this path.
 */
export interface AgentEdge {
  id: string;
  sourceId: string;
  targetId: string;
  conditionKeyword?: string; // New: For conditional routing
}

/**
 * @what Represents a single entry in the processing log.
 * @property {Date} timestamp - The time the log entry was created.
 * @property {string} message - The content of the log message.
 * @property {string} [nodeId] - The ID of the node associated with this log entry, if any.
 * @property {'info' | 'success' | 'error' | 'processing'} status - The type/status of the log, used for color-coding.
 * @property {GroundingChunk[]} [groundingMetadata] - Any sources associated with this log event.
 */
export interface ProcessLogEntry {
  timestamp: Date;
  message: string;
  nodeId?: string;
  status: 'info' | 'success' | 'error' | 'processing';
  groundingMetadata?: GroundingChunk[];
}